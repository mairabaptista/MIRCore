// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/14/2019 21:12:02"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          core
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module core_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk_button;
reg clock50M;
reg reset;
reg [15:0] switches;
// wires                                               
wire [31:0] Instruction;
wire [6:0] bilhao;
wire [31:0] bios_output;
wire bios_reset;
wire bios_select;
wire [6:0] centena;
wire clock;
wire [6:0] dezena;
wire intrpt;
wire [6:0] mil;
wire [6:0] milhao;
wire [9:0] outPC;
wire [6:0] quatrilhao;
wire [9:0] saidaPC;
wire stateOut;
wire [6:0] trilhao;
wire [6:0] unidade;

// assign statements (if any)                          
core i1 (
// port map - connection between master ports and signals/registers   
	.Instruction(Instruction),
	.bilhao(bilhao),
	.bios_output(bios_output),
	.bios_reset(bios_reset),
	.bios_select(bios_select),
	.centena(centena),
	.clk_button(clk_button),
	.clock(clock),
	.clock50M(clock50M),
	.dezena(dezena),
	.intrpt(intrpt),
	.mil(mil),
	.milhao(milhao),
	.outPC(outPC),
	.quatrilhao(quatrilhao),
	.reset(reset),
	.saidaPC(saidaPC),
	.stateOut(stateOut),
	.switches(switches),
	.trilhao(trilhao),
	.unidade(unidade)
);
initial 
begin 
#1000000 $finish;
end 

// clock50M
always
begin
	clock50M = 1'b0;
	clock50M = #100 1'b1;
	#100;
end 

// clk_button
initial
begin
	clk_button = 1'b0;
end 

// reset
initial
begin
	reset = 1'b0;
end 
// switches[ 15 ]
initial
begin
	switches[15] = 1'b0;
end 
// switches[ 14 ]
initial
begin
	switches[14] = 1'b0;
end 
// switches[ 13 ]
initial
begin
	switches[13] = 1'b0;
end 
// switches[ 12 ]
initial
begin
	switches[12] = 1'b0;
end 
// switches[ 11 ]
initial
begin
	switches[11] = 1'b0;
end 
// switches[ 10 ]
initial
begin
	switches[10] = 1'b0;
end 
// switches[ 9 ]
initial
begin
	switches[9] = 1'b0;
end 
// switches[ 8 ]
initial
begin
	switches[8] = 1'b0;
end 
// switches[ 7 ]
initial
begin
	switches[7] = 1'b0;
end 
// switches[ 6 ]
initial
begin
	switches[6] = 1'b0;
end 
// switches[ 5 ]
initial
begin
	switches[5] = 1'b0;
end 
// switches[ 4 ]
initial
begin
	switches[4] = 1'b0;
end 
// switches[ 3 ]
initial
begin
	switches[3] = 1'b0;
end 
// switches[ 2 ]
initial
begin
	switches[2] = 1'b0;
end 
// switches[ 1 ]
initial
begin
	switches[1] = 1'b0;
end 
// switches[ 0 ]
initial
begin
	switches[0] = 1'b0;
end 
endmodule

