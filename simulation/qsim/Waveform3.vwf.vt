// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/10/2020 22:19:24"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          core
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module core_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] UART_in;
reg clock50M;
reg reset;
reg [15:0] switches;
reg wb_flag;
// wires                                               
wire [2:0] UARTC;
wire [31:0] UART_out;
wire clock;
wire [31:0] display;
wire [9:0] outPC;
wire [31:0] rdata2;

// assign statements (if any)                          
core i1 (
// port map - connection between master ports and signals/registers   
	.UARTC(UARTC),
	.UART_in(UART_in),
	.UART_out(UART_out),
	.clock(clock),
	.clock50M(clock50M),
	.display(display),
	.outPC(outPC),
	.rdata2(rdata2),
	.reset(reset),
	.switches(switches),
	.wb_flag(wb_flag)
);
initial 
begin 
#1000000 $finish;
end 
// UART_in[ 31 ]
initial
begin
	UART_in[31] = 1'b0;
end 
// UART_in[ 30 ]
initial
begin
	UART_in[30] = 1'b0;
end 
// UART_in[ 29 ]
initial
begin
	UART_in[29] = 1'b0;
end 
// UART_in[ 28 ]
initial
begin
	UART_in[28] = 1'b0;
end 
// UART_in[ 27 ]
initial
begin
	UART_in[27] = 1'b0;
end 
// UART_in[ 26 ]
initial
begin
	UART_in[26] = 1'b0;
end 
// UART_in[ 25 ]
initial
begin
	UART_in[25] = 1'b0;
end 
// UART_in[ 24 ]
initial
begin
	UART_in[24] = 1'b0;
end 
// UART_in[ 23 ]
initial
begin
	UART_in[23] = 1'b0;
end 
// UART_in[ 22 ]
initial
begin
	UART_in[22] = 1'b0;
end 
// UART_in[ 21 ]
initial
begin
	UART_in[21] = 1'b0;
end 
// UART_in[ 20 ]
initial
begin
	UART_in[20] = 1'b0;
end 
// UART_in[ 19 ]
initial
begin
	UART_in[19] = 1'b0;
end 
// UART_in[ 18 ]
initial
begin
	UART_in[18] = 1'b0;
end 
// UART_in[ 17 ]
initial
begin
	UART_in[17] = 1'b0;
end 
// UART_in[ 16 ]
initial
begin
	UART_in[16] = 1'b0;
end 
// UART_in[ 15 ]
initial
begin
	UART_in[15] = 1'b0;
end 
// UART_in[ 14 ]
initial
begin
	UART_in[14] = 1'b0;
end 
// UART_in[ 13 ]
initial
begin
	UART_in[13] = 1'b0;
end 
// UART_in[ 12 ]
initial
begin
	UART_in[12] = 1'b0;
end 
// UART_in[ 11 ]
initial
begin
	UART_in[11] = 1'b0;
end 
// UART_in[ 10 ]
initial
begin
	UART_in[10] = 1'b0;
end 
// UART_in[ 9 ]
initial
begin
	UART_in[9] = 1'b0;
end 
// UART_in[ 8 ]
initial
begin
	UART_in[8] = 1'b0;
end 
// UART_in[ 7 ]
initial
begin
	UART_in[7] = 1'b0;
end 
// UART_in[ 6 ]
initial
begin
	UART_in[6] = 1'b0;
end 
// UART_in[ 5 ]
initial
begin
	UART_in[5] = 1'b0;
end 
// UART_in[ 4 ]
initial
begin
	UART_in[4] = 1'b1;
end 
// UART_in[ 3 ]
initial
begin
	UART_in[3] = 1'b0;
end 
// UART_in[ 2 ]
initial
begin
	UART_in[2] = 1'b0;
end 
// UART_in[ 1 ]
initial
begin
	UART_in[1] = 1'b0;
end 
// UART_in[ 0 ]
initial
begin
	UART_in[0] = 1'b0;
end 

// clock50M
always
begin
	clock50M = 1'b0;
	clock50M = #100 1'b1;
	#100;
end 

// wb_flag
initial
begin
	wb_flag = 1'b0;
	wb_flag = #800000 1'b1;
	wb_flag = #20000 1'b0;
end 

// reset
initial
begin
	reset = 1'b0;
end 
// switches[ 15 ]
initial
begin
	switches[15] = 1'b0;
end 
// switches[ 14 ]
initial
begin
	switches[14] = 1'b0;
end 
// switches[ 13 ]
initial
begin
	switches[13] = 1'b0;
end 
// switches[ 12 ]
initial
begin
	switches[12] = 1'b0;
end 
// switches[ 11 ]
initial
begin
	switches[11] = 1'b0;
end 
// switches[ 10 ]
initial
begin
	switches[10] = 1'b0;
end 
// switches[ 9 ]
initial
begin
	switches[9] = 1'b0;
end 
// switches[ 8 ]
initial
begin
	switches[8] = 1'b0;
end 
// switches[ 7 ]
initial
begin
	switches[7] = 1'b0;
end 
// switches[ 6 ]
initial
begin
	switches[6] = 1'b0;
end 
// switches[ 5 ]
initial
begin
	switches[5] = 1'b0;
end 
// switches[ 4 ]
initial
begin
	switches[4] = 1'b0;
end 
// switches[ 3 ]
initial
begin
	switches[3] = 1'b0;
end 
// switches[ 2 ]
initial
begin
	switches[2] = 1'b0;
end 
// switches[ 1 ]
initial
begin
	switches[1] = 1'b0;
end 
// switches[ 0 ]
initial
begin
	switches[0] = 1'b0;
end 
endmodule

